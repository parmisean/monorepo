name: main-workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  commit-lint:
    name: Commit Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Commit Lint
        uses: wagoid/commitlint-github-action@v5

  code-lint:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install GolangCI-Lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $GITHUB_WORKSPACE v1.50.1

      - name: Run GolangCI-Lint
        run: $GITHUB_WORKSPACE/golangci-lint run ./... --out-format=github-actions

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [commit-lint, code-lint]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.3
          cache: true

      - name: Run Go Build
        run: go build -v ./...

      - name: Run Go Mod Verify
        run: go mod verify

      - name: Run Go Vet
        run: go vet ./...

      - name: Run Unit and Acceptance Tests
        run: go test -race -vet=off ./... -v

  build-deploy-list:
    name: Determine Repository Changes
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'

    outputs:
      api_gateway: ${{ steps.filter.outputs.api_gateway }}
      api_service: ${{ steps.filter.outputs.api_service }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Change List
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shared: &shared
              - .github/workflows/**
              - internal/**
            api_gateway:
              - *shared
              - build/package/api-gateway.dockerfile
              - cmd/api-gateway/**
            api_service:
              - *shared
              - build/package/api-service.dockerfile
              - cmd/api-service/**

  deploy-api-gateway:
    name: Deploy API Gateway
    runs-on: ubuntu-latest
    needs: build-deploy-list
    if: ${{ github.event_name == 'push' && needs.build-deploy-list.outputs.api_gateway == 'true' }}

    steps:
      - name: Deploy API Gateway
        run: echo deploying api gateway

  deploy-api-service:
    name: Deploy API Service
    runs-on: ubuntu-latest
    needs: build-deploy-list
    if: ${{ github.event_name == 'push' && needs.build-deploy-list.outputs.api_service == 'true' }}

    steps:
      - name: Deploy API Service
        run: echo deploying api service
